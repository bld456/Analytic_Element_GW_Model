function [ A ] = Populate_A_w( model, refZ, Wells )
%POPULATE_A Summary of this function goes here
%   Detailed explanation goes here
nWells = length(Wells);
nRows = model.nSinks +model.nLakes+ nWells +1;
nColumns = model.nSinks +nWells+ 1;
A =zeros (nRows,nColumns);

%

% 

count_riverSinks = 0;

for r = 1:model.nRivers
    for l = 1:length(model.Rivers(r).LineSinks)
    count_riverSinks =count_riverSinks +1;
   
    end
end

count_lakeSinks = model.nSinks - count_riverSinks;

%add each river row 
for r = 1:count_riverSinks 
   for c = 1:nColumns-1
       z =  model.Sinks(r).mp;
      
       if c == nColumns
            A(r,c) = 1;
       elseif c > model.nSinks
            A(r,c) = real(Wells(c-model.nSinks).Omega(z));
       else
           A(r,c) =real(model.Sinks(c).Omega(z));
       end
   end
end
%add the lake rows (with subtractions)


%ad one to the index, check if they are both in the same LIneSink matrix 



 
 for r = count_riverSinks+1:model.nSinks
     for c = 1:(nColumns-1)
         z = model.Sinks(r).mp;
         
         if model.Sinks(r).z1 == model.Sinks(r-1).z2
             z2 = model.Sinks(r-1).mp;
         else
             z2 = model.Sinks(r+1).mp;
         end
         
         if c > model.nSinks
             A(r,c) =  real(Wells(c-model.nSinks).Omega(z) - Wells(c-model.nSinks).Omega(z2));
        else
            A(r,c) =real(model.Sinks(c).Omega(z) - model.Sinks(c).Omega(z2))   ;
      end
     end
 end
 

 
 
 for r = model.nSinks +1 : model.nSinks+ nWells
      for c = 1:(nColumns-1)
          
      end
 end
 
end
     






 
% %well rows
% %add the refrence row
% 
